// Copyright 2021 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.terminal.v1;

import "v1/access_request.proto";
import "v1/app.proto";
import "v1/auth_settings.proto";
import "v1/cluster.proto";
import "v1/database.proto";
import "v1/gateway.proto";
import "v1/kube.proto";
import "v1/server.proto";

option go_package = "github.com/zmb3/teleport/lib/teleterm/v1";

// TerminalService describes Teleterm service
service TerminalService {
  // UpdateTshdEventsServerAddress lets the Electron app update the address the tsh daemon is
  // supposed to use when connecting to the tshd events gRPC service. This RPC needs to be made
  // before any other from this service.
  //
  // The service is supposed to return a response from this call only after the client is ready.
  rpc UpdateTshdEventsServerAddress(UpdateTshdEventsServerAddressRequest) returns (UpdateTshdEventsServerAddressResponse);

  // ListRootClusters lists root clusters
  // Does not include detailed cluster information that would require a network request.
  rpc ListRootClusters(ListClustersRequest) returns (ListClustersResponse);
  // ListLeafClusters lists leaf clusters
  // Does not include detailed cluster information that would require a network request.
  rpc ListLeafClusters(ListLeafClustersRequest) returns (ListClustersResponse);
  // GetAllDatabases lists all databases without pagination
  rpc GetAllDatabases(GetAllDatabasesRequest) returns (GetAllDatabasesResponse);
  // GetDatabases returns a filtered and paginated list of databases
  rpc GetDatabases(GetDatabasesRequest) returns (GetDatabasesResponse);
  // ListDatabaseUsers lists allowed users for the given database based on the role set.
  rpc ListDatabaseUsers(ListDatabaseUsersRequest) returns (ListDatabaseUsersResponse);
  // GetAllServers returns all servers
  rpc GetAllServers(GetAllServersRequest) returns (GetAllServersResponse);
  // GetServers returns filtered, sorted, and paginated servers
  rpc GetServers(GetServersRequest) returns (GetServersResponse);
  // GetAccessRequests lists filtered AccessRequests
  rpc GetAccessRequests(GetAccessRequestsRequest) returns (GetAccessRequestsResponse);
  // GetAccessRequest retreives a single Access Request
  rpc GetAccessRequest(GetAccessRequestRequest) returns (GetAccessRequestResponse);
  // DeleteAccessRequest deletes the access request by id
  rpc DeleteAccessRequest(DeleteAccessRequestRequest) returns (EmptyResponse);
  // CreateAccessRequest creates an access request
  rpc CreateAccessRequest(CreateAccessRequestRequest) returns (CreateAccessRequestResponse);
  // ReviewAccessRequest submits a review for an Access Request
  rpc ReviewAccessRequest(ReviewAccessRequestRequest) returns (ReviewAccessRequestResponse);
  // GetRequestableRoles gets all requestable roles
  rpc GetRequestableRoles(GetRequestableRolesRequest) returns (GetRequestableRolesResponse);
  // AssumeRole assumes the role of the given access request
  rpc AssumeRole(AssumeRoleRequest) returns (EmptyResponse);
  // GetAllKubes list all kubes
  rpc GetAllKubes(GetAllKubesRequest) returns (GetAllKubesResponse);
  // GetKubes returns filtered, sorted, and paginated kubes
  rpc GetKubes(GetKubesRequest) returns (GetKubesResponse);
  // ListApps list apps
  rpc ListApps(ListAppsRequest) returns (ListAppsResponse);
  // AddCluster adds a cluster to profile
  rpc AddCluster(AddClusterRequest) returns (Cluster);
  // RemoveCluster removes a cluster from profile
  rpc RemoveCluster(RemoveClusterRequest) returns (EmptyResponse);

  // ListGateways lists gateways
  rpc ListGateways(ListGatewaysRequest) returns (ListGatewaysResponse);
  // CreateGateway creates a gateway
  rpc CreateGateway(CreateGatewayRequest) returns (Gateway);
  // RemoveGateway removes a gateway
  rpc RemoveGateway(RemoveGatewayRequest) returns (EmptyResponse);
  // RestartGateway stops a gateway and starts a new with identical parameters, keeping the
  // original URI. A temporary workaround until it's possible to refresh certs in a running
  // database proxy.
  rpc RestartGateway(RestartGatewayRequest) returns (EmptyResponse);
  // SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
  // and returns the updated version of gateway.Gateway.
  //
  // In Connect this is used to update the db name of a db connection along with the CLI command.
  rpc SetGatewayTargetSubresourceName(SetGatewayTargetSubresourceNameRequest) returns (Gateway);
  // SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
  // assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
  rpc SetGatewayLocalPort(SetGatewayLocalPortRequest) returns (Gateway);

  // GetAuthSettings returns cluster auth settigns
  rpc GetAuthSettings(GetAuthSettingsRequest) returns (AuthSettings);
  // GetCluster returns cluster. Makes a network request and includes detailed
  // information about enterprise features availabed on the connected auth server
  rpc GetCluster(GetClusterRequest) returns (Cluster);
  // Login logs in a user to a cluster
  rpc Login(LoginRequest) returns (EmptyResponse);
  // LoginPasswordless logs in a user to a cluster passwordlessly.
  //
  // The RPC is streaming both ways and the message sequence example for hardware keys are:
  // (-> means client-to-server, <- means server-to-client)
  //
  // Hardware keys:
  // -> Init
  // <- Send PasswordlessPrompt enum TAP to choose a device
  // -> Receive TAP device response
  // <- Send PasswordlessPrompt enum PIN
  // -> Receive PIN response
  // <- Send PasswordlessPrompt enum RETAP to confirm
  // -> Receive RETAP device response
  // <- Send list of credentials (e.g. usernames) associated with device
  // -> Receive the index number associated with the selected credential in list
  // <- End
  rpc LoginPasswordless(stream LoginPasswordlessRequest) returns (stream LoginPasswordlessResponse);
  // ClusterLogin logs out a user from cluster
  rpc Logout(LogoutRequest) returns (EmptyResponse);
  // TransferFile sends a request to download/upload a file
  rpc TransferFile(FileTransferRequest) returns (stream FileTransferProgress);
}

message EmptyResponse {}

// RemoveClusterRequest describes RemoveClusterRequest
message RemoveClusterRequest {
  string cluster_uri = 1;
}

// GetClusterRequest describes GetClusterRequest
message GetClusterRequest {
  string cluster_uri = 1;
}

// LogoutRequest describes LogoutRequest
message LogoutRequest {
  string cluster_uri = 1;
}

// PasswordlessPrompt describes different prompts we need from users
// during the passwordless login flow.
enum PasswordlessPrompt {
  PASSWORDLESS_PROMPT_UNSPECIFIED = 0;

  // PASSWORDLESS_PROMPT_PIN is used when we need a user's pin.
  PASSWORDLESS_PROMPT_PIN = 1;

  // PASSWORDLESS_PROMPT_TAP is used when we require a user to tap their device.
  PASSWORDLESS_PROMPT_TAP = 2;

  // PASSWORDLESS_PROMPT_CREDENTIAL is used when we require a user to select a username
  // associated with their account.
  PASSWORDLESS_PROMPT_CREDENTIAL = 3;
}

message GetAccessRequestRequest {
  string cluster_uri = 1;
  // specifcies a specific request id
  string access_request_id = 2;
}

message GetAccessRequestsRequest {
  // cluster_uri is the cluster uri
  string cluster_uri = 1;
}

message GetAccessRequestResponse {
  AccessRequest request = 1;
}

message GetAccessRequestsResponse {
  repeated AccessRequest requests = 1;
}

message DeleteAccessRequestRequest {
  string root_cluster_uri = 1;
  string access_request_id = 2;
}

message CreateAccessRequestRequest {
  string root_cluster_uri = 1;
  string reason = 2;
  repeated string roles = 3;
  repeated string suggested_reviewers = 4;
  repeated ResourceID resource_ids = 5;
}

message CreateAccessRequestResponse {
  AccessRequest request = 1;
}

message AssumeRoleRequest {
  string root_cluster_uri = 1;
  repeated string access_request_ids = 2;
  repeated string drop_request_ids = 3;
}

message GetRequestableRolesRequest {
  string cluster_uri = 1;
  repeated ResourceID resource_ids = 2;
}

message GetRequestableRolesResponse {
  repeated string roles = 1;
  repeated string applicable_roles = 2;
}

message ReviewAccessRequestRequest {
  string root_cluster_uri = 1;
  string state = 2;
  string reason = 3;
  repeated string roles = 4;
  string access_request_id = 5;
}

message ReviewAccessRequestResponse {
  AccessRequest request = 1;
}

// CredentialInfo holds fields related to a user's WebAuthn credential.
message CredentialInfo {
  string username = 1;
}

// LoginPasswordlessResponse is a message sent by the server during the
// passwordless login flow.
message LoginPasswordlessResponse {
  PasswordlessPrompt prompt = 1;
  repeated CredentialInfo credentials = 2;
}

// LoginPasswordlessRequest is a message sent by the client during the passwordless login flow.
message LoginPasswordlessRequest {
  oneof request {
    LoginPasswordlessRequestInit init = 1;
    LoginPasswordlessPINResponse pin = 2;
    LoginPasswordlessCredentialResponse credential = 3;
  }

  // LoginPasswordlessRequestInit contains fields needed to init the stream request.
  message LoginPasswordlessRequestInit {
    // cluster_uri is needed to resolve cluster by its uri.
    string cluster_uri = 1;
  }

  // LoginPasswordlessPINResponse contains fields related to request from webauthncli.PromptPIN.
  message LoginPasswordlessPINResponse {
    // pin is the user's device's pin.
    string pin = 1;
  }

  // LoginPasswordlessPINResponse contains fields related to request from
  // webauthncli.PromptCredential.
  message LoginPasswordlessCredentialResponse {
    // index is the associated number in the list of credentials that the user selected to log
    // in as.
    int64 index = 1;
  }
}

message FileTransferRequest {
  string cluster_uri = 1;
  string login = 2;
  string hostname = 3;
  // source path of the transferred file
  string source = 4;
  // destination path of the transferred file
  string destination = 5;
  // indicates whether the file is uploaded/downloaded
  FileTransferDirection direction = 6;
}

// FileTransferDirection describes directions of a file transfer
enum FileTransferDirection {
  FILE_TRANSFER_DIRECTION_UNSPECIFIED = 0;
  FILE_TRANSFER_DIRECTION_DOWNLOAD = 1;
  FILE_TRANSFER_DIRECTION_UPLOAD = 2;
}

message FileTransferProgress {
  uint32 percentage = 1;
}

// LoginRequest describes cluster login request
message LoginRequest {
  // cluster_uri is the cluster uri
  string cluster_uri = 1;

  oneof params {
    // local holds parameters for local logins
    LocalParams local = 2;
    // sso holds parameters for sso logins
    SsoParams sso = 3;
  }

  // LocalParams describes parameters for local user logins
  message LocalParams {
    // user is the user name
    string user = 1;
    // password is the user password
    string password = 2;
    // token is the 2FA token
    string token = 3;
  }

  // SsoParams describes SSO parameters
  message SsoParams {
    // provider_type is the provider type
    string provider_type = 1;
    // provider_name is the provider name
    string provider_name = 2;
  }
}

message AddClusterRequest {
  string name = 1;
}

message ListAppsRequest {
  string cluster_uri = 1;
}

message ListClustersRequest {}

message ListClustersResponse {
  repeated Cluster clusters = 1;
}

message GetAllDatabasesRequest {
  string cluster_uri = 1;
}

message GetDatabasesRequest {
  string cluster_uri = 1;
  int32 limit = 2;
  string start_key = 3;
  string search = 4;
  string query = 5;
  string sort_by = 6;
  string search_as_roles = 7;
}

message ListLeafClustersRequest {
  string cluster_uri = 1;
}

message GetAllDatabasesResponse {
  repeated Database databases = 1;
}

message ListDatabaseUsersRequest {
  string db_uri = 1;
}

message ListDatabaseUsersResponse {
  repeated string users = 1;
}

message CreateGatewayRequest {
  string target_uri = 1;
  string target_user = 2;
  string local_port = 3;
  string target_subresource_name = 4;
}

message ListGatewaysRequest {
  repeated string cluster_ids = 1;
}

message ListGatewaysResponse {
  repeated Gateway gateways = 1;
}

message RemoveGatewayRequest {
  string gateway_uri = 1;
}

message RestartGatewayRequest {
  string gateway_uri = 1;
}

message SetGatewayTargetSubresourceNameRequest {
  string gateway_uri = 1;
  string target_subresource_name = 2;
}

message SetGatewayLocalPortRequest {
  string gateway_uri = 1;
  string local_port = 2;
}

message GetAllServersRequest {
  string cluster_uri = 1;
}

message GetAllServersResponse {
  repeated Server servers = 1;
}

message GetServersRequest {
  string cluster_uri = 1;
  int32 limit = 2;
  string start_key = 3;
  string search = 4;
  string query = 5;
  string sort_by = 6;
  string search_as_roles = 7;
}

message GetServersResponse {
  repeated Server agents = 1;
  int32 total_count = 2;
  string start_key = 3;
}

message GetDatabasesResponse {
  repeated Database agents = 1;
  int32 total_count = 2;
  string start_key = 3;
}

message GetAllKubesRequest {
  string cluster_uri = 1;
}

message GetAllKubesResponse {
  repeated Kube kubes = 1;
}

message GetKubesRequest {
  string cluster_uri = 1;
  int32 limit = 2;
  string start_key = 3;
  string search = 4;
  string query = 5;
  string sort_by = 6;
  string search_as_roles = 7;
}

message GetKubesResponse {
  repeated Kube agents = 1;
  int32 total_count = 2;
  string start_key = 3;
}

message ListAppsResponse {
  repeated App apps = 1;
}

message GetAuthSettingsRequest {
  string cluster_uri = 1;
}

message UpdateTshdEventsServerAddressRequest {
  string address = 1;
}
message UpdateTshdEventsServerAddressResponse {}
